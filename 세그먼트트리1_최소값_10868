import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 세그먼트트리1_최소값_10868 {
	
	static int N, M, A[],cache[][],tree[];
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		A = new int[N+1];
		tree = new int[N*4];
		
		for(int i = 0 ; i < N ; i++){
			A[i] = Integer.parseInt(br.readLine());
		}
		
		initTree(0,N-1,1);
		for(int i = 0 ; i < M ; i++){
			st = new StringTokenizer(br.readLine());
			int left = Integer.parseInt(st.nextToken());
			int right = Integer.parseInt(st.nextToken());
			
			System.out.println(query(1, 0, N-1, left-1, right-1));
		}
	}
	
	
	public static int query(int node, int start, int end, int i, int j){
		System.out.println("==========");
		if (i > end || j < start) return -1;
        if (i <= start && end <= j) return tree[node];
		
        System.out.println("start = " + start + " end = " + end);
        int m1 = query(node*2, start, (start+end)/2, i, j);
        int m2 = query(node*2+1, (start+end)/2+1, end, i, j);
        System.out.println("node = " + node + "start = " + start + " end = " + end + " m1 = " + m1 + " m2 = " + m2);
        if (m1 == -1) return m2;
        else if (m2 == -1) return m1;
        else return Math.min(m1,m2);
	}
	
	public static void initTree(int start, int end, int node){
		if(start==end){
			tree[node] = A[start];
		}else{
			initTree(start,(start+end)/2,node*2);
			initTree((start+end)/2+1,end,node*2+1);
			
			tree[node] = Math.min(tree[node*2], tree[node*2+1]);
		}
	}
	
	public static void updateTree(int node, int start, int end, int index, int val){
		if(index < start || end < index) return;
		if(start == end){
			tree[node] = val;
			return;
		}
		
		updateTree(node*2,start,(start+end)/2,index,val);
		updateTree(node*2,(start+end)/2+1,end,index,val);
		
		tree[node] = Math.min(tree[node*2], tree[node*2+1]);
		
	}

}
