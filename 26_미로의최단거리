import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Solution_26_미로의최단거리 {

	static int visit[][];
	static char map[][];
	static int row, col, min, cnt, end, N;
	static int dr[] = { -1, 1, 0, 0 };
	static int dc[] = { 0, 0, -1, 1 };

	public static void main(String[] args) throws FileNotFoundException {
		System.setIn(new FileInputStream("src/resource/Solution_26_미로의최단거리"));
		Scanner sc = new Scanner(System.in);

		int T = sc.nextInt();
		for (int tc = 1; tc <= T; tc++) {
			N = sc.nextInt();
			map = new char[N][N];
			visit = new int[N][N];
			min = Integer.MAX_VALUE;
			for (int i = 0; i < N; i++) {
				map[i] = sc.next().toCharArray();
			}

			int r = 0;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == '2') {
						 find(i, j, 0);
					}
				}
			}
			
			if(min > N*N){
				min = 0;
			}
			
			System.out.println("#"+ tc + " " + min);
		}

	}

	public static void find(int r, int c, int val) {
		if (map[r][c] == '3') {
			val = val - 1;
			min = Math.min(min, val);
		}else if(val >= min){
			return;
		}else{
			map[r][c] = '1';
			
			for (int i = 0; i < 4; i++) {
				int nr = r + dr[i];
				int nc = c + dc[i];

				if (nr >= 0 && nc >= 0 && nr < N && nc < N) {
					if (map[nr][nc] != '1') {
						find(nr, nc, val+1);
					}
				}
			}
			
			map[r][c] = '0';
			
		}
	}
}
