import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	static int t, n, k, time[], a[][], s, d[];
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		t = Integer.parseInt(st.nextToken());
		
		for(int tc = 0 ; tc < t ; tc++){
			st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			k = Integer.parseInt(st.nextToken());
			
			time = new int[n+1];
			a = new int[n+1][n+1];
			d = new int[n+1]; 
			
			st = new StringTokenizer(br.readLine());
			
			for(int i = 1; i <= n ; i++){
				time[i] = Integer.parseInt(st.nextToken());
				d[i] = -1;
			}
			
			for(int i = 1; i <= k ; i++){
				st = new StringTokenizer(br.readLine());
				int x = Integer.parseInt(st.nextToken());
				int y = Integer.parseInt(st.nextToken());
				a[x][y] = 1;
			}
			
			st = new StringTokenizer(br.readLine());
			s = Integer.parseInt(st.nextToken());
			
			//System.out.println(Arrays.deepToString(a));
			
			int val = go(s);
			System.out.println(val);
		}
	}
	
	public static int go(int pos){
		
		int ret = d[pos];
		if(ret != -1) return d[pos];
		
		ret = time[pos];
		
		for(int i = 1 ; i <= n ; i++){
			if(a[i][pos] == 1){
				ret = Math.max(ret, go(i) + time[pos]);
			}
		}
		d[pos] = ret;
		
		return ret;
		
	}
}
