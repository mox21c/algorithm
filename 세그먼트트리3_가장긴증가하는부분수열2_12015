import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 세그먼트트리3_가장긴증가하는부분수열2_12015 {
	static int N, A[], tree[];
	public static final int MAX = 1000000;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		A = new int[N];
		int h = (int) Math.ceil(Math.log(MAX) / Math.log(2));
		int tree_size = (1 << (h + 1));
		tree = new int[tree_size];

		StringTokenizer st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			A[i] = Integer.parseInt(st.nextToken());
			
		}
		int ans = 0;
		
		for (int i = 0; i < N; i++) {
			int cur = maximum(1, 1, MAX, 1, A[i]);
			System.out.println(cur);
			if (ans < cur + 1) {
	            ans = cur + 1;
	        }
			
			
			update(1, 1, MAX, A[i], cur+1);
		}
		System.out.println("ans = " + ans);
	}

	public static int maximum(int node, int start, int end, int left, int right) {

		if (left > end || right < start) {
			return 0;
		}

		if (left <= start && end <= right) {
			return tree[node];
		}

		return Math.max(maximum(node * 2, start, (start + end) / 2, left, right),
				maximum(node * 2 + 1, (start + end) / 2 + 1, end, left, right));

	}
	
	public static void update(int node, int start, int end, int i, int value) {
        if (i > end || i < start) {
            return;
        }
        tree[node] = Math.max(tree[node], value);
        if (start != end) {
            update(node*2, start, (start+end)/2, i, value);
            update(node*2+1, (start+end)/2+1, end, i, value);
        }
    }
}
